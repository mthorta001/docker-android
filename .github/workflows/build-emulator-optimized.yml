name: Android emulator (Optimized)

on: 
  workflow_dispatch:
    inputs: 
      tags: 
        description: 'Image tag version'
        required: true
        default: ''
      build_type:
        description: 'Build type'
        required: false
        default: 'standard'
        type: choice
        options:
          - standard
          - no-cache
          - squash
      enable_compression:
        description: 'Enable image compression'
        required: false
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        android: ["12.0", "14.0", "15.0", "16.0"]
    env:
      ANDROID_VERSION: ${{ matrix.android }}
      TRAVIS_TAG: ${{ github.event.inputs.tags }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      BUILD_TYPE: ${{ github.event.inputs.build_type }}
      ENABLE_COMPRESSION: ${{ github.event.inputs.enable_compression }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11.2
        uses: actions/setup-python@v4
        with:
          python-version: 3.11.2

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Free up disk space
        run: |
          # Remove unnecessary packages to free up space
          sudo apt-get remove -y '^dotnet-.*'
          sudo apt-get remove -y '^llvm-.*'
          sudo apt-get remove -y 'php.*'
          sudo apt-get autoremove -y
          sudo apt-get clean
          
          # Remove large directories
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf /usr/local/graalvm/
          sudo rm -rf /usr/local/.ghcup/
          sudo rm -rf /usr/local/share/powershell
          sudo rm -rf /usr/local/share/chromium
          sudo rm -rf /usr/local/lib/android
          
          # Show available space
          df -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push optimized Docker image
        run: |
          # Make build scripts executable
          chmod +x build-optimized.sh
          chmod +x travis-optimized.sh
          chmod +x release.sh
          
          # Set build options based on inputs
          if [ "$BUILD_TYPE" = "no-cache" ]; then
            export NO_CACHE=true
          fi
          if [ "$BUILD_TYPE" = "squash" ]; then
            export SQUASH=true
          fi
          if [ "$ENABLE_COMPRESSION" = "true" ]; then
            export COMPRESS=true
          fi
          
          # Run optimized build via specialized script
          bash travis-optimized.sh
        shell: bash

      - name: Test Docker image
        run: |
          # Basic test to ensure image was built correctly
          docker images | grep budtmo/docker-android
          
          # Test image can start (basic smoke test)
          IMAGE_TAG="budtmo/docker-android:emulator_${ANDROID_VERSION}"
          echo "Testing image: $IMAGE_TAG"
          
          # Start container in background
          docker run -d --name test-container \
            -e EMULATOR_DEVICE="Samsung Galaxy S10" \
            -e WEB_VNC=true \
            -p 6080:6080 \
            -p 5554:5554 \
            -p 5555:5555 \
            "$IMAGE_TAG"
          
          # Wait a bit for container to start
          sleep 30
          
          # Check if container is running
          if docker ps | grep test-container; then
            echo "✅ Container started successfully"
          else
            echo "❌ Container failed to start"
            docker logs test-container
            exit 1
          fi
          
          # Clean up
          docker stop test-container
          docker rm test-container

      - name: Image size report
        run: |
          echo "## Docker Image Sizes" >> $GITHUB_STEP_SUMMARY
          echo "| Image | Size | Compressed |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|------|------------|" >> $GITHUB_STEP_SUMMARY
          
          for img in $(docker images --format "table {{.Repository}}:{{.Tag}}\t{{.Size}}" | grep budtmo/docker-android | head -5); do
            echo "| $img |" >> $GITHUB_STEP_SUMMARY
          done
          
          # Show in logs as well
          echo "Built images:"
          docker images | grep budtmo/docker-android 