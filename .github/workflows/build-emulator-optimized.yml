name: Android emulator (Optimized)

on: 
  workflow_dispatch:
    inputs: 
      tags: 
        description: 'Image tag version'
        required: true
        default: ''
      build_type:
        description: 'Build type'
        required: false
        default: 'standard'
        type: choice
        options:
          - standard
          - no-cache
          - squash
      enable_compression:
        description: 'Enable image compression'
        required: false
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        android: ["12.0", "14.0", "15.0", "16.0"]
    env:
      ANDROID_VERSION: ${{ matrix.android }}
      TRAVIS_TAG: ${{ github.event.inputs.tags }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      BUILD_TYPE: ${{ github.event.inputs.build_type }}
      ENABLE_COMPRESSION: ${{ github.event.inputs.enable_compression }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11.2
        uses: actions/setup-python@v4
        with:
          python-version: 3.11.2

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Free up disk space
        run: |
          # Remove unnecessary packages to free up space
          sudo apt-get remove -y '^dotnet-.*'
          sudo apt-get remove -y '^llvm-.*'
          sudo apt-get remove -y 'php.*'
          sudo apt-get autoremove -y
          sudo apt-get clean
          
          # Remove large directories
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf /usr/local/graalvm/
          sudo rm -rf /usr/local/.ghcup/
          sudo rm -rf /usr/local/share/powershell
          sudo rm -rf /usr/local/share/chromium
          sudo rm -rf /usr/local/lib/android
          
          # Show available space
          df -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push optimized Docker image
        run: |
          # Make build scripts executable
          chmod +x build-optimized.sh
          chmod +x travis-optimized.sh
          chmod +x release.sh
          
          # Set build options based on inputs
          if [ "$BUILD_TYPE" = "no-cache" ]; then
            export NO_CACHE=true
          fi
          if [ "$BUILD_TYPE" = "squash" ]; then
            export SQUASH=true
          fi
          if [ "$ENABLE_COMPRESSION" = "true" ]; then
            export COMPRESS=true
          fi
          
          # Run optimized build via specialized script
          bash travis-optimized.sh
        shell: bash

      - name: Test Docker image
        run: |
          # Basic test to ensure image was built correctly
          echo "=== Available Docker images ==="
          docker images | grep docker-android || echo "No docker-android images found"
          docker images
          
          # Test image can start (basic smoke test)
          # Note: Should match non-optimized version format: rcswain/docker-android-x86-X.X:TAG
          DOCKER_ORG="${DOCKER_USERNAME:-budtmo}"
          IMAGE_TAG="${DOCKER_ORG}/docker-android-x86-${ANDROID_VERSION}:${TRAVIS_TAG}"
          echo "Testing image: $IMAGE_TAG"
          
          # Check if the specific image exists
          if ! docker image inspect "$IMAGE_TAG" >/dev/null 2>&1; then
            echo "❌ Image $IMAGE_TAG not found!"
            echo "Available images:"
            docker images | grep docker-android || echo "No docker-android images found"
            exit 1
          fi
          
          echo "✅ Image $IMAGE_TAG found"
          
          # Start container in background with production-like config
          echo "Starting container..."
          docker run -d --name test-container \
            --privileged \
            --shm-size=2g \
            -e DEVICE="pixel" \
            -e AVD_NAME="Pixel-Test" \
            -e RAM="8192" \
            -e DATAPARTITION="8192" \
            -e APPIUM="true" \
            -e APPIUM_PORT="4723" \
            -e ADB_PORT="5555" \
            -e WEB_VNC="false" \
            -e DEFAULT_CAPABILITIES='{"appium:skipDeviceInitialization": true, "appium:disableAndroidWatchers": true}' \
            -p 4723:4723 \
            -p 5555:5555 \
            "$IMAGE_TAG" || {
              echo "❌ Failed to start container"
              docker logs test-container 2>/dev/null || echo "No logs available"
              exit 1
            }
          
          # Wait for container to initialize (Android emulator needs time)
          echo "Waiting for container to start..."
          
          # Check container status periodically
          for i in {1..12}; do
            echo "Check $i/12: Waiting 15 seconds..."
            sleep 15
            
            if ! docker ps | grep test-container; then
              echo "❌ Container stopped unexpectedly!"
              echo "Container logs:"
              docker logs test-container
              exit 1
            fi
            
            echo "Container still running, checking progress..."
            docker logs --tail 5 test-container
          done
          
          echo "=== Final container status check ==="
          if docker ps | grep test-container; then
            echo "✅ Container started successfully and is still running"
            echo "Container status:"
            docker ps | grep test-container
            
            # Additional health checks
            echo "=== Health checks ==="
            echo "Checking ADB connection..."
            if docker exec test-container adb devices 2>/dev/null | grep -q "emulator"; then
              echo "✅ ADB connection established"
            else
              echo "⚠️  ADB connection not yet established (may need more time)"
            fi
            
            echo "Container logs (last 30 lines):"
            docker logs --tail 30 test-container
          else
            echo "❌ Container failed to start or stopped"
            echo "Container logs:"
            docker logs test-container
            echo "Docker ps output:"
            docker ps -a | grep test-container
            exit 1
          fi
          
          # Clean up
          echo "Cleaning up..."
          docker stop test-container || echo "Container already stopped"
          docker rm test-container || echo "Container already removed"

      - name: Image size report
        run: |
          echo "## Docker Image Sizes" >> $GITHUB_STEP_SUMMARY
          echo "| Image | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|------|" >> $GITHUB_STEP_SUMMARY
          
          # Use the same Docker org logic as in the test step
          DOCKER_ORG="${DOCKER_USERNAME:-budtmo}"
          
          # Show all built docker-android images
          echo "=== All Docker Android Images ==="
          docker images | grep docker-android || echo "No docker-android images found"
          
          # Add to GitHub summary - look for our specific pattern
          if docker images --format "{{.Repository}}:{{.Tag}} {{.Size}}" | grep "$DOCKER_ORG/docker-android-x86-" | head -5; then
            docker images --format "{{.Repository}}:{{.Tag}} {{.Size}}" | grep "$DOCKER_ORG/docker-android-x86-" | head -5 | while read image_info; do
              echo "| $image_info |" >> $GITHUB_STEP_SUMMARY
            done
          else
            echo "| No $DOCKER_ORG/docker-android-x86-* images found | - |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Show in logs as well
          echo "Built images for $DOCKER_ORG:"
          docker images | grep "$DOCKER_ORG/docker-android" || echo "No images found for $DOCKER_ORG" 